// nios_alt_vip_cl_scl_0.v

// This file was auto-generated from alt_vip_cl_scl_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module nios_alt_vip_cl_scl_0 (
		input  wire        main_clock,            // main_clock.clk
		input  wire        main_reset,            // main_reset.reset
		input  wire [23:0] din_data,              //        din.data
		input  wire        din_valid,             //           .valid
		input  wire        din_startofpacket,     //           .startofpacket
		input  wire        din_endofpacket,       //           .endofpacket
		output wire        din_ready,             //           .ready
		output wire [23:0] dout_data,             //       dout.data
		output wire        dout_valid,            //           .valid
		output wire        dout_startofpacket,    //           .startofpacket
		output wire        dout_endofpacket,      //           .endofpacket
		input  wire        dout_ready,            //           .ready
		input  wire [6:0]  control_address,       //    control.address
		input  wire [3:0]  control_byteenable,    //           .byteenable
		input  wire        control_write,         //           .write
		input  wire [31:0] control_writedata,     //           .writedata
		input  wire        control_read,          //           .read
		output wire [31:0] control_readdata,      //           .readdata
		output wire        control_readdatavalid, //           .readdatavalid
		output wire        control_waitrequest    //           .waitrequest
	);

	wire          scheduler_av_st_cmd_kc_valid;             // scheduler:av_st_cmd_kc_valid -> kernel_creator:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_kc_data;              // scheduler:av_st_cmd_kc_data -> kernel_creator:av_st_cmd_data
	wire          scheduler_av_st_cmd_kc_ready;             // kernel_creator:av_st_cmd_ready -> scheduler:av_st_cmd_kc_ready
	wire          scheduler_av_st_cmd_kc_startofpacket;     // scheduler:av_st_cmd_kc_startofpacket -> kernel_creator:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_kc_endofpacket;       // scheduler:av_st_cmd_kc_endofpacket -> kernel_creator:av_st_cmd_endofpacket
	wire          scheduler_av_st_cmd_vob_valid;            // scheduler:av_st_cmd_vob_valid -> video_out:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_vob_data;             // scheduler:av_st_cmd_vob_data -> video_out:av_st_cmd_data
	wire          scheduler_av_st_cmd_vob_ready;            // video_out:av_st_cmd_ready -> scheduler:av_st_cmd_vob_ready
	wire          scheduler_av_st_cmd_vob_startofpacket;    // scheduler:av_st_cmd_vob_startofpacket -> video_out:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_vob_endofpacket;      // scheduler:av_st_cmd_vob_endofpacket -> video_out:av_st_cmd_endofpacket
	wire          video_in_resp_av_st_resp_valid;           // video_in_resp:av_st_resp_valid -> scheduler:av_st_resp_vib_valid
	wire   [63:0] video_in_resp_av_st_resp_data;            // video_in_resp:av_st_resp_data -> scheduler:av_st_resp_vib_data
	wire          video_in_resp_av_st_resp_ready;           // scheduler:av_st_resp_vib_ready -> video_in_resp:av_st_resp_ready
	wire          video_in_resp_av_st_resp_startofpacket;   // video_in_resp:av_st_resp_startofpacket -> scheduler:av_st_resp_vib_startofpacket
	wire          video_in_resp_av_st_resp_endofpacket;     // video_in_resp:av_st_resp_endofpacket -> scheduler:av_st_resp_vib_endofpacket
	wire          kernel_creator_av_st_resp_valid;          // kernel_creator:av_st_resp_valid -> scheduler:av_st_resp_kc_valid
	wire   [63:0] kernel_creator_av_st_resp_data;           // kernel_creator:av_st_resp_data -> scheduler:av_st_resp_kc_data
	wire          kernel_creator_av_st_resp_ready;          // scheduler:av_st_resp_kc_ready -> kernel_creator:av_st_resp_ready
	wire          kernel_creator_av_st_resp_startofpacket;  // kernel_creator:av_st_resp_startofpacket -> scheduler:av_st_resp_kc_startofpacket
	wire          kernel_creator_av_st_resp_endofpacket;    // kernel_creator:av_st_resp_endofpacket -> scheduler:av_st_resp_kc_endofpacket
	wire          video_in_resp_av_st_dout_valid;           // video_in_resp:av_st_dout_valid -> video_in_cmd:av_st_din_valid
	wire   [55:0] video_in_resp_av_st_dout_data;            // video_in_resp:av_st_dout_data -> video_in_cmd:av_st_din_data
	wire          video_in_resp_av_st_dout_ready;           // video_in_cmd:av_st_din_ready -> video_in_resp:av_st_dout_ready
	wire          video_in_resp_av_st_dout_startofpacket;   // video_in_resp:av_st_dout_startofpacket -> video_in_cmd:av_st_din_startofpacket
	wire          video_in_resp_av_st_dout_endofpacket;     // video_in_resp:av_st_dout_endofpacket -> video_in_cmd:av_st_din_endofpacket
	wire          scheduler_av_st_cmd_vib_valid;            // scheduler:av_st_cmd_vib_valid -> video_in_cmd:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_vib_data;             // scheduler:av_st_cmd_vib_data -> video_in_cmd:av_st_cmd_data
	wire          scheduler_av_st_cmd_vib_ready;            // video_in_cmd:av_st_cmd_ready -> scheduler:av_st_cmd_vib_ready
	wire          scheduler_av_st_cmd_vib_startofpacket;    // scheduler:av_st_cmd_vib_startofpacket -> video_in_cmd:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_vib_endofpacket;      // scheduler:av_st_cmd_vib_endofpacket -> video_in_cmd:av_st_cmd_endofpacket
	wire          video_in_cmd_av_st_dout_valid;            // video_in_cmd:av_st_dout_valid -> input_demux:av_st_din_valid
	wire   [55:0] video_in_cmd_av_st_dout_data;             // video_in_cmd:av_st_dout_data -> input_demux:av_st_din_data
	wire          video_in_cmd_av_st_dout_ready;            // input_demux:av_st_din_ready -> video_in_cmd:av_st_dout_ready
	wire          video_in_cmd_av_st_dout_startofpacket;    // video_in_cmd:av_st_dout_startofpacket -> input_demux:av_st_din_startofpacket
	wire          video_in_cmd_av_st_dout_endofpacket;      // video_in_cmd:av_st_dout_endofpacket -> input_demux:av_st_din_endofpacket
	wire          input_demux_av_st_dout_0_valid;           // input_demux:av_st_dout_valid_0 -> line_buffer_0:av_st_din_valid
	wire   [55:0] input_demux_av_st_dout_0_data;            // input_demux:av_st_dout_data_0 -> line_buffer_0:av_st_din_data
	wire          input_demux_av_st_dout_0_ready;           // line_buffer_0:av_st_din_ready -> input_demux:av_st_dout_ready_0
	wire          input_demux_av_st_dout_0_startofpacket;   // input_demux:av_st_dout_startofpacket_0 -> line_buffer_0:av_st_din_startofpacket
	wire          input_demux_av_st_dout_0_endofpacket;     // input_demux:av_st_dout_endofpacket_0 -> line_buffer_0:av_st_din_endofpacket
	wire          line_buffer_0_av_st_dout_0_valid;         // line_buffer_0:av_st_dout_valid_0 -> scaler_core_0:av_st_din_valid
	wire   [55:0] line_buffer_0_av_st_dout_0_data;          // line_buffer_0:av_st_dout_data_0 -> scaler_core_0:av_st_din_data
	wire          line_buffer_0_av_st_dout_0_ready;         // scaler_core_0:av_st_din_ready -> line_buffer_0:av_st_dout_ready_0
	wire          line_buffer_0_av_st_dout_0_startofpacket; // line_buffer_0:av_st_dout_startofpacket_0 -> scaler_core_0:av_st_din_startofpacket
	wire          line_buffer_0_av_st_dout_0_endofpacket;   // line_buffer_0:av_st_dout_endofpacket_0 -> scaler_core_0:av_st_din_endofpacket
	wire          scaler_core_0_av_st_dout_valid;           // scaler_core_0:av_st_dout_valid -> seq_to_par_0:av_st_din_valid
	wire   [55:0] scaler_core_0_av_st_dout_data;            // scaler_core_0:av_st_dout_data -> seq_to_par_0:av_st_din_data
	wire          scaler_core_0_av_st_dout_ready;           // seq_to_par_0:av_st_din_ready -> scaler_core_0:av_st_dout_ready
	wire          scaler_core_0_av_st_dout_startofpacket;   // scaler_core_0:av_st_dout_startofpacket -> seq_to_par_0:av_st_din_startofpacket
	wire          scaler_core_0_av_st_dout_endofpacket;     // scaler_core_0:av_st_dout_endofpacket -> seq_to_par_0:av_st_din_endofpacket
	wire          scheduler_av_st_cmd_lb_0_valid;           // scheduler:av_st_cmd_lb_valid_0 -> line_buffer_0:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_lb_0_data;            // scheduler:av_st_cmd_lb_data_0 -> line_buffer_0:av_st_cmd_data
	wire          scheduler_av_st_cmd_lb_0_ready;           // line_buffer_0:av_st_cmd_ready -> scheduler:av_st_cmd_lb_ready_0
	wire          scheduler_av_st_cmd_lb_0_startofpacket;   // scheduler:av_st_cmd_lb_startofpacket_0 -> line_buffer_0:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_lb_0_endofpacket;     // scheduler:av_st_cmd_lb_endofpacket_0 -> line_buffer_0:av_st_cmd_endofpacket
	wire          scheduler_av_st_cmd_ac_0_valid;           // scheduler:av_st_cmd_ac_valid_0 -> scaler_core_0:av_st_line_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_ac_0_data;            // scheduler:av_st_cmd_ac_data_0 -> scaler_core_0:av_st_line_cmd_data
	wire          scheduler_av_st_cmd_ac_0_ready;           // scaler_core_0:av_st_line_cmd_ready -> scheduler:av_st_cmd_ac_ready_0
	wire          scheduler_av_st_cmd_ac_0_startofpacket;   // scheduler:av_st_cmd_ac_startofpacket_0 -> scaler_core_0:av_st_line_cmd_startofpacket
	wire          scheduler_av_st_cmd_ac_0_endofpacket;     // scheduler:av_st_cmd_ac_endofpacket_0 -> scaler_core_0:av_st_line_cmd_endofpacket
	wire          input_demux_av_st_dout_1_valid;           // input_demux:av_st_dout_valid_1 -> output_mux:av_st_din_valid_1
	wire   [55:0] input_demux_av_st_dout_1_data;            // input_demux:av_st_dout_data_1 -> output_mux:av_st_din_data_1
	wire          input_demux_av_st_dout_1_ready;           // output_mux:av_st_din_ready_1 -> input_demux:av_st_dout_ready_1
	wire          input_demux_av_st_dout_1_startofpacket;   // input_demux:av_st_dout_startofpacket_1 -> output_mux:av_st_din_startofpacket_1
	wire          input_demux_av_st_dout_1_endofpacket;     // input_demux:av_st_dout_endofpacket_1 -> output_mux:av_st_din_endofpacket_1
	wire          seq_to_par_0_av_st_dout_valid;            // seq_to_par_0:av_st_dout_valid -> output_mux:av_st_din_valid_0
	wire   [55:0] seq_to_par_0_av_st_dout_data;             // seq_to_par_0:av_st_dout_data -> output_mux:av_st_din_data_0
	wire          seq_to_par_0_av_st_dout_ready;            // output_mux:av_st_din_ready_0 -> seq_to_par_0:av_st_dout_ready
	wire          seq_to_par_0_av_st_dout_startofpacket;    // seq_to_par_0:av_st_dout_startofpacket -> output_mux:av_st_din_startofpacket_0
	wire          seq_to_par_0_av_st_dout_endofpacket;      // seq_to_par_0:av_st_dout_endofpacket -> output_mux:av_st_din_endofpacket_0
	wire          output_mux_av_st_dout_valid;              // output_mux:av_st_dout_valid -> video_out:av_st_din_valid
	wire   [55:0] output_mux_av_st_dout_data;               // output_mux:av_st_dout_data -> video_out:av_st_din_data
	wire          output_mux_av_st_dout_ready;              // video_out:av_st_din_ready -> output_mux:av_st_dout_ready
	wire          output_mux_av_st_dout_startofpacket;      // output_mux:av_st_dout_startofpacket -> video_out:av_st_din_startofpacket
	wire          output_mux_av_st_dout_endofpacket;        // output_mux:av_st_dout_endofpacket -> video_out:av_st_din_endofpacket
	wire          scheduler_av_st_cmd_pm_valid;             // scheduler:av_st_cmd_pm_valid -> output_mux:av_st_cmd_valid
	wire   [63:0] scheduler_av_st_cmd_pm_data;              // scheduler:av_st_cmd_pm_data -> output_mux:av_st_cmd_data
	wire          scheduler_av_st_cmd_pm_ready;             // output_mux:av_st_cmd_ready -> scheduler:av_st_cmd_pm_ready
	wire          scheduler_av_st_cmd_pm_startofpacket;     // scheduler:av_st_cmd_pm_startofpacket -> output_mux:av_st_cmd_startofpacket
	wire          scheduler_av_st_cmd_pm_endofpacket;       // scheduler:av_st_cmd_pm_endofpacket -> output_mux:av_st_cmd_endofpacket
	wire    [0:0] scheduler_av_st_cmd_ac_endofpacket;       // port fragment
	wire    [0:0] scheduler_av_st_cmd_lb_endofpacket;       // port fragment
	wire   [63:0] scheduler_av_st_cmd_lb_data;              // port fragment
	wire   [63:0] scheduler_av_st_cmd_ac_data;              // port fragment
	wire    [0:0] scheduler_av_st_cmd_ac_valid;             // port fragment
	wire    [0:0] scheduler_av_st_cmd_lb_valid;             // port fragment
	wire    [0:0] scheduler_av_st_cmd_lb_startofpacket;     // port fragment
	wire    [0:0] scheduler_av_st_cmd_ac_startofpacket;     // port fragment
	wire  [111:0] input_demux_av_st_dout_data;              // port fragment
	wire    [1:0] input_demux_av_st_dout_valid;             // port fragment
	wire    [1:0] input_demux_av_st_dout_startofpacket;     // port fragment
	wire    [1:0] input_demux_av_st_dout_endofpacket;       // port fragment
	wire   [55:0] line_buffer_0_av_st_dout_data;            // port fragment
	wire    [0:0] line_buffer_0_av_st_dout_valid;           // port fragment
	wire    [0:0] line_buffer_0_av_st_dout_startofpacket;   // port fragment
	wire    [0:0] line_buffer_0_av_st_dout_endofpacket;     // port fragment
	wire    [1:0] output_mux_av_st_din_ready;               // port fragment

	alt_vip_video_input_bridge_resp #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (1920),
		.VIB_MODE                     ("FULL"),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.MAX_WIDTH                    (1920),
		.MAX_HEIGHT                   (1080),
		.ENABLE_RESOLUTION_CHECK      (1),
		.MULTI_CONTEXT_SUPPORT        (0),
		.PIPELINE_READY               (0),
		.RESP_SRC_ADDRESS             (0),
		.RESP_DST_ADDRESS             (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) video_in_resp (
		.clock                       (main_clock),                             //    main_clock.clk
		.reset                       (main_reset),                             //    main_reset.reset
		.av_st_vid_din_data          (din_data),                               // av_st_vid_din.data
		.av_st_vid_din_valid         (din_valid),                              //              .valid
		.av_st_vid_din_startofpacket (din_startofpacket),                      //              .startofpacket
		.av_st_vid_din_endofpacket   (din_endofpacket),                        //              .endofpacket
		.av_st_vid_din_ready         (din_ready),                              //              .ready
		.av_st_resp_valid            (video_in_resp_av_st_resp_valid),         //    av_st_resp.valid
		.av_st_resp_startofpacket    (video_in_resp_av_st_resp_startofpacket), //              .startofpacket
		.av_st_resp_endofpacket      (video_in_resp_av_st_resp_endofpacket),   //              .endofpacket
		.av_st_resp_data             (video_in_resp_av_st_resp_data),          //              .data
		.av_st_resp_ready            (video_in_resp_av_st_resp_ready),         //              .ready
		.av_st_dout_valid            (video_in_resp_av_st_dout_valid),         //    av_st_dout.valid
		.av_st_dout_startofpacket    (video_in_resp_av_st_dout_startofpacket), //              .startofpacket
		.av_st_dout_endofpacket      (video_in_resp_av_st_dout_endofpacket),   //              .endofpacket
		.av_st_dout_data             (video_in_resp_av_st_dout_data),          //              .data
		.av_st_dout_ready            (video_in_resp_av_st_dout_ready)          //              .ready
	);

	alt_vip_video_output_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.SOP_PRE_ALIGNED              (1),
		.MULTI_CONTEXT_SUPPORT        (0),
		.NO_CONCATENATION             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.LOW_LATENCY_COMMAND_MODE     (0)
	) video_out (
		.clock                        (main_clock),                            //     main_clock.clk
		.reset                        (main_reset),                            //     main_reset.reset
		.av_st_cmd_valid              (scheduler_av_st_cmd_vob_valid),         //      av_st_cmd.valid
		.av_st_cmd_startofpacket      (scheduler_av_st_cmd_vob_startofpacket), //               .startofpacket
		.av_st_cmd_endofpacket        (scheduler_av_st_cmd_vob_endofpacket),   //               .endofpacket
		.av_st_cmd_data               (scheduler_av_st_cmd_vob_data),          //               .data
		.av_st_cmd_ready              (scheduler_av_st_cmd_vob_ready),         //               .ready
		.av_st_din_valid              (output_mux_av_st_dout_valid),           //      av_st_din.valid
		.av_st_din_startofpacket      (output_mux_av_st_dout_startofpacket),   //               .startofpacket
		.av_st_din_endofpacket        (output_mux_av_st_dout_endofpacket),     //               .endofpacket
		.av_st_din_data               (output_mux_av_st_dout_data),            //               .data
		.av_st_din_ready              (output_mux_av_st_dout_ready),           //               .ready
		.av_st_vid_dout_data          (dout_data),                             // av_st_vid_dout.data
		.av_st_vid_dout_valid         (dout_valid),                            //               .valid
		.av_st_vid_dout_startofpacket (dout_startofpacket),                    //               .startofpacket
		.av_st_vid_dout_endofpacket   (dout_endofpacket),                      //               .endofpacket
		.av_st_vid_dout_ready         (dout_ready)                             //               .ready
	);

	alt_vip_scaler_scheduler #(
		.ALGORITHM           ("NEAREST_NEIGHBOUR"),
		.PIXELS_IN_PARALLEL  (1),
		.IS_422              (1),
		.DEFAULT_EDGE_THRESH (7),
		.MAX_IN_WIDTH        (1920),
		.MAX_IN_HEIGHT       (1080),
		.MAX_OUT_WIDTH       (1920),
		.MAX_OUT_HEIGHT      (1080),
		.RUNTIME_CONTROL     (1),
		.LOAD_AT_RUNTIME     (0),
		.H_BANKS             (1),
		.V_BANKS             (1),
		.H_PHASE_BITS        (1),
		.V_PHASE_BITS        (1),
		.H_TAPS              (1),
		.V_TAPS              (1),
		.NO_BLANKING         (0),
		.COEFF_WIDTH         (0),
		.USER_PACKET_SUPPORT ("PASSTHROUGH"),
		.PIPELINE_READY      (0),
		.LIMITED_READBACK    (0)
	) scheduler (
		.clock                        (main_clock),                              //     main_clock.clk
		.reset                        (main_reset),                              //     main_reset.reset
		.av_st_resp_vib_valid         (video_in_resp_av_st_resp_valid),          // av_st_resp_vib.valid
		.av_st_resp_vib_startofpacket (video_in_resp_av_st_resp_startofpacket),  //               .startofpacket
		.av_st_resp_vib_endofpacket   (video_in_resp_av_st_resp_endofpacket),    //               .endofpacket
		.av_st_resp_vib_data          (video_in_resp_av_st_resp_data),           //               .data
		.av_st_resp_vib_ready         (video_in_resp_av_st_resp_ready),          //               .ready
		.av_st_resp_kc_valid          (kernel_creator_av_st_resp_valid),         //  av_st_resp_kc.valid
		.av_st_resp_kc_startofpacket  (kernel_creator_av_st_resp_startofpacket), //               .startofpacket
		.av_st_resp_kc_endofpacket    (kernel_creator_av_st_resp_endofpacket),   //               .endofpacket
		.av_st_resp_kc_data           (kernel_creator_av_st_resp_data),          //               .data
		.av_st_resp_kc_ready          (kernel_creator_av_st_resp_ready),         //               .ready
		.av_st_cmd_kc_valid           (scheduler_av_st_cmd_kc_valid),            //   av_st_cmd_kc.valid
		.av_st_cmd_kc_startofpacket   (scheduler_av_st_cmd_kc_startofpacket),    //               .startofpacket
		.av_st_cmd_kc_endofpacket     (scheduler_av_st_cmd_kc_endofpacket),      //               .endofpacket
		.av_st_cmd_kc_data            (scheduler_av_st_cmd_kc_data),             //               .data
		.av_st_cmd_kc_ready           (scheduler_av_st_cmd_kc_ready),            //               .ready
		.av_st_cmd_lb_valid           (scheduler_av_st_cmd_lb_valid[0]),         // av_st_cmd_lb_0.valid
		.av_st_cmd_lb_startofpacket   (scheduler_av_st_cmd_lb_startofpacket[0]), //               .startofpacket
		.av_st_cmd_lb_endofpacket     (scheduler_av_st_cmd_lb_endofpacket[0]),   //               .endofpacket
		.av_st_cmd_lb_data            (scheduler_av_st_cmd_lb_data[63:0]),       //               .data
		.av_st_cmd_lb_ready           (scheduler_av_st_cmd_lb_0_ready),          //               .ready
		.av_st_cmd_ac_valid           (scheduler_av_st_cmd_ac_valid[0]),         // av_st_cmd_ac_0.valid
		.av_st_cmd_ac_startofpacket   (scheduler_av_st_cmd_ac_startofpacket[0]), //               .startofpacket
		.av_st_cmd_ac_endofpacket     (scheduler_av_st_cmd_ac_endofpacket[0]),   //               .endofpacket
		.av_st_cmd_ac_data            (scheduler_av_st_cmd_ac_data[63:0]),       //               .data
		.av_st_cmd_ac_ready           (scheduler_av_st_cmd_ac_0_ready),          //               .ready
		.av_st_cmd_vib_valid          (scheduler_av_st_cmd_vib_valid),           //  av_st_cmd_vib.valid
		.av_st_cmd_vib_startofpacket  (scheduler_av_st_cmd_vib_startofpacket),   //               .startofpacket
		.av_st_cmd_vib_endofpacket    (scheduler_av_st_cmd_vib_endofpacket),     //               .endofpacket
		.av_st_cmd_vib_data           (scheduler_av_st_cmd_vib_data),            //               .data
		.av_st_cmd_vib_ready          (scheduler_av_st_cmd_vib_ready),           //               .ready
		.av_st_cmd_pm_valid           (scheduler_av_st_cmd_pm_valid),            //   av_st_cmd_pm.valid
		.av_st_cmd_pm_startofpacket   (scheduler_av_st_cmd_pm_startofpacket),    //               .startofpacket
		.av_st_cmd_pm_endofpacket     (scheduler_av_st_cmd_pm_endofpacket),      //               .endofpacket
		.av_st_cmd_pm_data            (scheduler_av_st_cmd_pm_data),             //               .data
		.av_st_cmd_pm_ready           (scheduler_av_st_cmd_pm_ready),            //               .ready
		.av_st_cmd_vob_valid          (scheduler_av_st_cmd_vob_valid),           //  av_st_cmd_vob.valid
		.av_st_cmd_vob_startofpacket  (scheduler_av_st_cmd_vob_startofpacket),   //               .startofpacket
		.av_st_cmd_vob_endofpacket    (scheduler_av_st_cmd_vob_endofpacket),     //               .endofpacket
		.av_st_cmd_vob_data           (scheduler_av_st_cmd_vob_data),            //               .data
		.av_st_cmd_vob_ready          (scheduler_av_st_cmd_vob_ready),           //               .ready
		.av_mm_control_address        (control_address),                         //  av_mm_control.address
		.av_mm_control_byteenable     (control_byteenable),                      //               .byteenable
		.av_mm_control_write          (control_write),                           //               .write
		.av_mm_control_writedata      (control_writedata),                       //               .writedata
		.av_mm_control_read           (control_read),                            //               .read
		.av_mm_control_readdata       (control_readdata),                        //               .readdata
		.av_mm_control_readdatavalid  (control_readdatavalid),                   //               .readdatavalid
		.av_mm_control_waitrequest    (control_waitrequest)                      //               .waitrequest
	);

	alt_vip_scaler_kernel_creator #(
		.ALGORITHM            ("NEAREST_NEIGHBOUR"),
		.PARTIAL_LINE_SCALING (0),
		.IS_422               (1),
		.FRAC_BITS_H          (1),
		.FRAC_BITS_W          (1),
		.FIXED_SIZE           (0),
		.MAX_IN_WIDTH         (1920),
		.MAX_IN_HEIGHT        (1080),
		.MAX_OUT_WIDTH        (1920),
		.MAX_OUT_HEIGHT       (1080),
		.EXTRA_PIPELINE_REG   (0),
		.SRC_WIDTH            (8),
		.DST_WIDTH            (8),
		.CONTEXT_WIDTH        (8),
		.TASK_WIDTH           (8),
		.RESP_SRC_ADDR        (0)
	) kernel_creator (
		.clock                    (main_clock),                              // main_clock.clk
		.reset                    (main_reset),                              // main_reset.reset
		.av_st_cmd_valid          (scheduler_av_st_cmd_kc_valid),            //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_av_st_cmd_kc_startofpacket),    //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_av_st_cmd_kc_endofpacket),      //           .endofpacket
		.av_st_cmd_data           (scheduler_av_st_cmd_kc_data),             //           .data
		.av_st_cmd_ready          (scheduler_av_st_cmd_kc_ready),            //           .ready
		.av_st_resp_valid         (kernel_creator_av_st_resp_valid),         // av_st_resp.valid
		.av_st_resp_startofpacket (kernel_creator_av_st_resp_startofpacket), //           .startofpacket
		.av_st_resp_endofpacket   (kernel_creator_av_st_resp_endofpacket),   //           .endofpacket
		.av_st_resp_data          (kernel_creator_av_st_resp_data),          //           .data
		.av_st_resp_ready         (kernel_creator_av_st_resp_ready)          //           .ready
	);

	alt_vip_video_input_bridge_cmd #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.PIPELINE_READY               (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) video_in_cmd (
		.clock                    (main_clock),                             // main_clock.clk
		.reset                    (main_reset),                             // main_reset.reset
		.av_st_cmd_valid          (scheduler_av_st_cmd_vib_valid),          //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_av_st_cmd_vib_startofpacket),  //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_av_st_cmd_vib_endofpacket),    //           .endofpacket
		.av_st_cmd_data           (scheduler_av_st_cmd_vib_data),           //           .data
		.av_st_cmd_ready          (scheduler_av_st_cmd_vib_ready),          //           .ready
		.av_st_din_valid          (video_in_resp_av_st_dout_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (video_in_resp_av_st_dout_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (video_in_resp_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_din_data           (video_in_resp_av_st_dout_data),          //           .data
		.av_st_din_ready          (video_in_resp_av_st_dout_ready),         //           .ready
		.av_st_dout_valid         (video_in_cmd_av_st_dout_valid),          // av_st_dout.valid
		.av_st_dout_startofpacket (video_in_cmd_av_st_dout_startofpacket),  //           .startofpacket
		.av_st_dout_endofpacket   (video_in_cmd_av_st_dout_endofpacket),    //           .endofpacket
		.av_st_dout_data          (video_in_cmd_av_st_dout_data),           //           .data
		.av_st_dout_ready         (video_in_cmd_av_st_dout_ready)           //           .ready
	);

	alt_vip_packet_demux #(
		.NUM_OUTPUTS        (2),
		.CLIP_ADDRESS_BITS  (0),
		.SHIFT_ADDRESS_BITS (0),
		.REGISTER_OUTPUT    (1),
		.PIPELINE_READY     (0),
		.SRC_WIDTH          (8),
		.DST_WIDTH          (8),
		.CONTEXT_WIDTH      (8),
		.TASK_WIDTH         (8),
		.DATA_WIDTH_INT     (24),
		.USER_WIDTH_INT     (0)
	) input_demux (
		.clock                    (main_clock),                                                                        //   main_clock.clk
		.reset                    (main_reset),                                                                        //   main_reset.reset
		.av_st_din_valid          (video_in_cmd_av_st_dout_valid),                                                     //    av_st_din.valid
		.av_st_din_startofpacket  (video_in_cmd_av_st_dout_startofpacket),                                             //             .startofpacket
		.av_st_din_endofpacket    (video_in_cmd_av_st_dout_endofpacket),                                               //             .endofpacket
		.av_st_din_data           (video_in_cmd_av_st_dout_data),                                                      //             .data
		.av_st_din_ready          (video_in_cmd_av_st_dout_ready),                                                     //             .ready
		.av_st_dout_valid         ({input_demux_av_st_dout_valid[1],input_demux_av_st_dout_valid[0]}),                 // av_st_dout_0.valid
		.av_st_dout_startofpacket ({input_demux_av_st_dout_startofpacket[1],input_demux_av_st_dout_startofpacket[0]}), //             .startofpacket
		.av_st_dout_endofpacket   ({input_demux_av_st_dout_endofpacket[1],input_demux_av_st_dout_endofpacket[0]}),     //             .endofpacket
		.av_st_dout_data          ({input_demux_av_st_dout_data[111:56],input_demux_av_st_dout_data[55:0]}),           //             .data
		.av_st_dout_ready         ({input_demux_av_st_dout_1_ready,input_demux_av_st_dout_0_ready})                    //             .ready
	);

	alt_vip_line_buffer #(
		.PIXEL_WIDTH             (24),
		.SYMBOLS_IN_SEQ          (1),
		.PIXELS_IN_PARALLEL      (1),
		.CONVERT_TO_1_PIP        (0),
		.MAX_LINE_LENGTH         (1920),
		.OUTPUT_PORTS            (1),
		.MODE                    ("RATE_MATCHING"),
		.ENABLE_RECEIVE_ONLY_CMD (0),
		.TRACK_LINE_LENGTH       (1),
		.OUTPUT_MUX_SEL          ("OLD"),
		.FIFO_SIZE               (4),
		.KERNEL_SIZE_0           (1),
		.KERNEL_CENTER_0         (0),
		.KERNEL_SIZE_1           (8),
		.KERNEL_START_1          (0),
		.KERNEL_CENTER_1         (3),
		.KERNEL_SIZE_2           (8),
		.KERNEL_START_2          (0),
		.KERNEL_CENTER_2         (3),
		.KERNEL_SIZE_3           (8),
		.KERNEL_START_3          (0),
		.KERNEL_CENTER_3         (3),
		.KERNEL_SIZE_4           (8),
		.KERNEL_START_4          (0),
		.KERNEL_CENTER_4         (3),
		.KERNEL_SIZE_5           (8),
		.KERNEL_START_5          (0),
		.KERNEL_CENTER_5         (3),
		.KERNEL_SIZE_6           (8),
		.KERNEL_START_6          (0),
		.KERNEL_CENTER_6         (3),
		.KERNEL_SIZE_7           (8),
		.KERNEL_START_7          (0),
		.KERNEL_CENTER_7         (3),
		.SRC_WIDTH               (8),
		.DST_WIDTH               (8),
		.CONTEXT_WIDTH           (8),
		.TASK_WIDTH              (8),
		.SOURCE_ADDRESS          (0),
		.ENABLE_FIFOS            (0),
		.ENABLE_PIPELINE_REG     (0),
		.FAMILY                  ("Cyclone V")
	) line_buffer_0 (
		.clock                    (main_clock),                                //   main_clock.clk
		.reset                    (main_reset),                                //   main_reset.reset
		.av_st_cmd_valid          (scheduler_av_st_cmd_lb_0_valid),            //    av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_av_st_cmd_lb_0_startofpacket),    //             .startofpacket
		.av_st_cmd_endofpacket    (scheduler_av_st_cmd_lb_0_endofpacket),      //             .endofpacket
		.av_st_cmd_data           (scheduler_av_st_cmd_lb_0_data),             //             .data
		.av_st_cmd_ready          (scheduler_av_st_cmd_lb_0_ready),            //             .ready
		.av_st_din_valid          (input_demux_av_st_dout_0_valid),            //    av_st_din.valid
		.av_st_din_startofpacket  (input_demux_av_st_dout_0_startofpacket),    //             .startofpacket
		.av_st_din_endofpacket    (input_demux_av_st_dout_0_endofpacket),      //             .endofpacket
		.av_st_din_data           (input_demux_av_st_dout_0_data),             //             .data
		.av_st_din_ready          (input_demux_av_st_dout_0_ready),            //             .ready
		.av_st_dout_valid         (line_buffer_0_av_st_dout_valid[0]),         // av_st_dout_0.valid
		.av_st_dout_ready         (line_buffer_0_av_st_dout_0_ready),          //             .ready
		.av_st_dout_startofpacket (line_buffer_0_av_st_dout_startofpacket[0]), //             .startofpacket
		.av_st_dout_endofpacket   (line_buffer_0_av_st_dout_endofpacket[0]),   //             .endofpacket
		.av_st_dout_data          (line_buffer_0_av_st_dout_data[55:0])        //             .data
	);

	nios_alt_vip_cl_scl_0_scaler_core_0 scaler_core_0 (
		.clock                        (main_clock),                               //     main_clock.clk
		.reset                        (main_reset),                               //     main_reset.reset
		.av_st_line_cmd_valid         (scheduler_av_st_cmd_ac_0_valid),           // av_st_line_cmd.valid
		.av_st_line_cmd_startofpacket (scheduler_av_st_cmd_ac_0_startofpacket),   //               .startofpacket
		.av_st_line_cmd_endofpacket   (scheduler_av_st_cmd_ac_0_endofpacket),     //               .endofpacket
		.av_st_line_cmd_data          (scheduler_av_st_cmd_ac_0_data),            //               .data
		.av_st_line_cmd_ready         (scheduler_av_st_cmd_ac_0_ready),           //               .ready
		.av_st_din_valid              (line_buffer_0_av_st_dout_0_valid),         //      av_st_din.valid
		.av_st_din_startofpacket      (line_buffer_0_av_st_dout_0_startofpacket), //               .startofpacket
		.av_st_din_endofpacket        (line_buffer_0_av_st_dout_0_endofpacket),   //               .endofpacket
		.av_st_din_data               (line_buffer_0_av_st_dout_0_data),          //               .data
		.av_st_din_ready              (line_buffer_0_av_st_dout_0_ready),         //               .ready
		.av_st_dout_valid             (scaler_core_0_av_st_dout_valid),           //     av_st_dout.valid
		.av_st_dout_startofpacket     (scaler_core_0_av_st_dout_startofpacket),   //               .startofpacket
		.av_st_dout_endofpacket       (scaler_core_0_av_st_dout_endofpacket),     //               .endofpacket
		.av_st_dout_data              (scaler_core_0_av_st_dout_data),            //               .data
		.av_st_dout_ready             (scaler_core_0_av_st_dout_ready)            //               .ready
	);

	alt_vip_pip_converter_core #(
		.PIXEL_WIDTH            (24),
		.PIXELS_IN_PARALLEL_IN  (1),
		.PIXELS_IN_PARALLEL_OUT (1),
		.PIPELINE_READY         (0),
		.SRC_WIDTH              (8),
		.DST_WIDTH              (8),
		.CONTEXT_WIDTH          (8),
		.TASK_WIDTH             (8),
		.INPUT_FIFO_DEPTH       (0),
		.OUTPUT_FIFO_DEPTH      (0)
	) seq_to_par_0 (
		.clock                    (main_clock),                             // main_clock.clk
		.reset                    (main_reset),                             // main_reset.reset
		.av_st_din_valid          (scaler_core_0_av_st_dout_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (scaler_core_0_av_st_dout_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (scaler_core_0_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_din_data           (scaler_core_0_av_st_dout_data),          //           .data
		.av_st_din_ready          (scaler_core_0_av_st_dout_ready),         //           .ready
		.av_st_dout_valid         (seq_to_par_0_av_st_dout_valid),          // av_st_dout.valid
		.av_st_dout_startofpacket (seq_to_par_0_av_st_dout_startofpacket),  //           .startofpacket
		.av_st_dout_endofpacket   (seq_to_par_0_av_st_dout_endofpacket),    //           .endofpacket
		.av_st_dout_data          (seq_to_par_0_av_st_dout_data),           //           .data
		.av_st_dout_ready         (seq_to_par_0_av_st_dout_ready)           //           .ready
	);

	alt_vip_packet_mux #(
		.NUM_INPUTS      (2),
		.REGISTER_OUTPUT (1),
		.PIPELINE_READY  (0),
		.NAME            ("undefined"),
		.SRC_WIDTH       (8),
		.DST_WIDTH       (8),
		.CONTEXT_WIDTH   (8),
		.TASK_WIDTH      (8),
		.DATA_WIDTH_INT  (24),
		.USER_WIDTH_INT  (0)
	) output_mux (
		.clock                    (main_clock),                                                                     //  main_clock.clk
		.reset                    (main_reset),                                                                     //  main_reset.reset
		.av_st_cmd_valid          (scheduler_av_st_cmd_pm_valid),                                                   //   av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_av_st_cmd_pm_startofpacket),                                           //            .startofpacket
		.av_st_cmd_endofpacket    (scheduler_av_st_cmd_pm_endofpacket),                                             //            .endofpacket
		.av_st_cmd_data           (scheduler_av_st_cmd_pm_data),                                                    //            .data
		.av_st_cmd_ready          (scheduler_av_st_cmd_pm_ready),                                                   //            .ready
		.av_st_din_valid          ({input_demux_av_st_dout_1_valid,seq_to_par_0_av_st_dout_valid}),                 // av_st_din_0.valid
		.av_st_din_startofpacket  ({input_demux_av_st_dout_1_startofpacket,seq_to_par_0_av_st_dout_startofpacket}), //            .startofpacket
		.av_st_din_endofpacket    ({input_demux_av_st_dout_1_endofpacket,seq_to_par_0_av_st_dout_endofpacket}),     //            .endofpacket
		.av_st_din_data           ({input_demux_av_st_dout_1_data[55:0],seq_to_par_0_av_st_dout_data[55:0]}),       //            .data
		.av_st_din_ready          ({output_mux_av_st_din_ready[1],output_mux_av_st_din_ready[0]}),                  //            .ready
		.av_st_dout_valid         (output_mux_av_st_dout_valid),                                                    //  av_st_dout.valid
		.av_st_dout_startofpacket (output_mux_av_st_dout_startofpacket),                                            //            .startofpacket
		.av_st_dout_endofpacket   (output_mux_av_st_dout_endofpacket),                                              //            .endofpacket
		.av_st_dout_data          (output_mux_av_st_dout_data),                                                     //            .data
		.av_st_dout_ready         (output_mux_av_st_dout_ready)                                                     //            .ready
	);

	assign input_demux_av_st_dout_0_valid = { input_demux_av_st_dout_valid[0] };

	assign input_demux_av_st_dout_0_data = { input_demux_av_st_dout_data[55:0] };

	assign input_demux_av_st_dout_0_startofpacket = { input_demux_av_st_dout_startofpacket[0] };

	assign input_demux_av_st_dout_0_endofpacket = { input_demux_av_st_dout_endofpacket[0] };

	assign line_buffer_0_av_st_dout_0_valid = { line_buffer_0_av_st_dout_valid[0] };

	assign line_buffer_0_av_st_dout_0_data = { line_buffer_0_av_st_dout_data[55:0] };

	assign line_buffer_0_av_st_dout_0_startofpacket = { line_buffer_0_av_st_dout_startofpacket[0] };

	assign line_buffer_0_av_st_dout_0_endofpacket = { line_buffer_0_av_st_dout_endofpacket[0] };

	assign scheduler_av_st_cmd_lb_0_valid = { scheduler_av_st_cmd_lb_valid[0] };

	assign scheduler_av_st_cmd_lb_0_data = { scheduler_av_st_cmd_lb_data[63:0] };

	assign scheduler_av_st_cmd_lb_0_startofpacket = { scheduler_av_st_cmd_lb_startofpacket[0] };

	assign scheduler_av_st_cmd_lb_0_endofpacket = { scheduler_av_st_cmd_lb_endofpacket[0] };

	assign scheduler_av_st_cmd_ac_0_valid = { scheduler_av_st_cmd_ac_valid[0] };

	assign scheduler_av_st_cmd_ac_0_data = { scheduler_av_st_cmd_ac_data[63:0] };

	assign scheduler_av_st_cmd_ac_0_startofpacket = { scheduler_av_st_cmd_ac_startofpacket[0] };

	assign scheduler_av_st_cmd_ac_0_endofpacket = { scheduler_av_st_cmd_ac_endofpacket[0] };

	assign input_demux_av_st_dout_1_valid = { input_demux_av_st_dout_valid[1] };

	assign input_demux_av_st_dout_1_data = { input_demux_av_st_dout_data[111:56] };

	assign input_demux_av_st_dout_1_ready = { output_mux_av_st_din_ready[1] };

	assign input_demux_av_st_dout_1_startofpacket = { input_demux_av_st_dout_startofpacket[1] };

	assign input_demux_av_st_dout_1_endofpacket = { input_demux_av_st_dout_endofpacket[1] };

	assign seq_to_par_0_av_st_dout_ready = { output_mux_av_st_din_ready[0] };

endmodule
