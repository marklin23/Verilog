// pattern_gen.v

// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module pattern_gen (
		output wire [23:0] alt_vip_cl_cvo_0_clocked_video_vid_data,        // alt_vip_cl_cvo_0_clocked_video.vid_data
		output wire        alt_vip_cl_cvo_0_clocked_video_underflow,       //                               .underflow
		output wire        alt_vip_cl_cvo_0_clocked_video_vid_mode_change, //                               .vid_mode_change
		output wire        alt_vip_cl_cvo_0_clocked_video_vid_std,         //                               .vid_std
		output wire        alt_vip_cl_cvo_0_clocked_video_vid_datavalid,   //                               .vid_datavalid
		output wire        alt_vip_cl_cvo_0_clocked_video_vid_v_sync,      //                               .vid_v_sync
		output wire        alt_vip_cl_cvo_0_clocked_video_vid_h_sync,      //                               .vid_h_sync
		output wire        alt_vip_cl_cvo_0_clocked_video_vid_f,           //                               .vid_f
		output wire        alt_vip_cl_cvo_0_clocked_video_vid_h,           //                               .vid_h
		output wire        alt_vip_cl_cvo_0_clocked_video_vid_v,           //                               .vid_v
		input  wire        clk_clk,                                        //                            clk.clk
		input  wire        reset_reset_n                                   //                          reset.reset_n
	);

	wire         alt_vip_cl_tpg_0_dout_valid;                              // alt_vip_cl_tpg_0:dout_valid -> alt_vip_cl_scl_0:din_valid
	wire  [23:0] alt_vip_cl_tpg_0_dout_data;                               // alt_vip_cl_tpg_0:dout_data -> alt_vip_cl_scl_0:din_data
	wire         alt_vip_cl_tpg_0_dout_ready;                              // alt_vip_cl_scl_0:din_ready -> alt_vip_cl_tpg_0:dout_ready
	wire         alt_vip_cl_tpg_0_dout_startofpacket;                      // alt_vip_cl_tpg_0:dout_startofpacket -> alt_vip_cl_scl_0:din_startofpacket
	wire         alt_vip_cl_tpg_0_dout_endofpacket;                        // alt_vip_cl_tpg_0:dout_endofpacket -> alt_vip_cl_scl_0:din_endofpacket
	wire         alt_vip_cl_scl_0_dout_valid;                              // alt_vip_cl_scl_0:dout_valid -> alt_vip_cl_cvo_0:din_valid
	wire  [23:0] alt_vip_cl_scl_0_dout_data;                               // alt_vip_cl_scl_0:dout_data -> alt_vip_cl_cvo_0:din_data
	wire         alt_vip_cl_scl_0_dout_ready;                              // alt_vip_cl_cvo_0:din_ready -> alt_vip_cl_scl_0:dout_ready
	wire         alt_vip_cl_scl_0_dout_startofpacket;                      // alt_vip_cl_scl_0:dout_startofpacket -> alt_vip_cl_cvo_0:din_startofpacket
	wire         alt_vip_cl_scl_0_dout_endofpacket;                        // alt_vip_cl_scl_0:dout_endofpacket -> alt_vip_cl_cvo_0:din_endofpacket
	wire  [31:0] mm_master_bfm_0_m0_readdata;                              // mm_interconnect_0:mm_master_bfm_0_m0_readdata -> mm_master_bfm_0:avm_readdata
	wire         mm_master_bfm_0_m0_waitrequest;                           // mm_interconnect_0:mm_master_bfm_0_m0_waitrequest -> mm_master_bfm_0:avm_waitrequest
	wire  [31:0] mm_master_bfm_0_m0_address;                               // mm_master_bfm_0:avm_address -> mm_interconnect_0:mm_master_bfm_0_m0_address
	wire         mm_master_bfm_0_m0_read;                                  // mm_master_bfm_0:avm_read -> mm_interconnect_0:mm_master_bfm_0_m0_read
	wire   [3:0] mm_master_bfm_0_m0_byteenable;                            // mm_master_bfm_0:avm_byteenable -> mm_interconnect_0:mm_master_bfm_0_m0_byteenable
	wire         mm_master_bfm_0_m0_readdatavalid;                         // mm_interconnect_0:mm_master_bfm_0_m0_readdatavalid -> mm_master_bfm_0:avm_readdatavalid
	wire  [31:0] mm_master_bfm_0_m0_writedata;                             // mm_master_bfm_0:avm_writedata -> mm_interconnect_0:mm_master_bfm_0_m0_writedata
	wire         mm_master_bfm_0_m0_write;                                 // mm_master_bfm_0:avm_write -> mm_interconnect_0:mm_master_bfm_0_m0_write
	wire   [2:0] mm_master_bfm_0_m0_burstcount;                            // mm_master_bfm_0:avm_burstcount -> mm_interconnect_0:mm_master_bfm_0_m0_burstcount
	wire  [31:0] master_0_master_readdata;                                 // mm_interconnect_0:master_0_master_readdata -> master_0:master_readdata
	wire         master_0_master_waitrequest;                              // mm_interconnect_0:master_0_master_waitrequest -> master_0:master_waitrequest
	wire  [31:0] master_0_master_address;                                  // master_0:master_address -> mm_interconnect_0:master_0_master_address
	wire         master_0_master_read;                                     // master_0:master_read -> mm_interconnect_0:master_0_master_read
	wire   [3:0] master_0_master_byteenable;                               // master_0:master_byteenable -> mm_interconnect_0:master_0_master_byteenable
	wire         master_0_master_readdatavalid;                            // mm_interconnect_0:master_0_master_readdatavalid -> master_0:master_readdatavalid
	wire         master_0_master_write;                                    // master_0:master_write -> mm_interconnect_0:master_0_master_write
	wire  [31:0] master_0_master_writedata;                                // master_0:master_writedata -> mm_interconnect_0:master_0_master_writedata
	wire  [31:0] mm_interconnect_0_alt_vip_cl_cvo_0_control_readdata;      // alt_vip_cl_cvo_0:control_readdata -> mm_interconnect_0:alt_vip_cl_cvo_0_control_readdata
	wire         mm_interconnect_0_alt_vip_cl_cvo_0_control_waitrequest;   // alt_vip_cl_cvo_0:control_waitrequest -> mm_interconnect_0:alt_vip_cl_cvo_0_control_waitrequest
	wire   [7:0] mm_interconnect_0_alt_vip_cl_cvo_0_control_address;       // mm_interconnect_0:alt_vip_cl_cvo_0_control_address -> alt_vip_cl_cvo_0:control_address
	wire         mm_interconnect_0_alt_vip_cl_cvo_0_control_read;          // mm_interconnect_0:alt_vip_cl_cvo_0_control_read -> alt_vip_cl_cvo_0:control_read
	wire   [3:0] mm_interconnect_0_alt_vip_cl_cvo_0_control_byteenable;    // mm_interconnect_0:alt_vip_cl_cvo_0_control_byteenable -> alt_vip_cl_cvo_0:control_byteenable
	wire         mm_interconnect_0_alt_vip_cl_cvo_0_control_readdatavalid; // alt_vip_cl_cvo_0:control_readdatavalid -> mm_interconnect_0:alt_vip_cl_cvo_0_control_readdatavalid
	wire         mm_interconnect_0_alt_vip_cl_cvo_0_control_write;         // mm_interconnect_0:alt_vip_cl_cvo_0_control_write -> alt_vip_cl_cvo_0:control_write
	wire  [31:0] mm_interconnect_0_alt_vip_cl_cvo_0_control_writedata;     // mm_interconnect_0:alt_vip_cl_cvo_0_control_writedata -> alt_vip_cl_cvo_0:control_writedata
	wire  [31:0] mm_interconnect_0_alt_vip_cl_tpg_0_control_readdata;      // alt_vip_cl_tpg_0:control_readdata -> mm_interconnect_0:alt_vip_cl_tpg_0_control_readdata
	wire         mm_interconnect_0_alt_vip_cl_tpg_0_control_waitrequest;   // alt_vip_cl_tpg_0:control_waitrequest -> mm_interconnect_0:alt_vip_cl_tpg_0_control_waitrequest
	wire   [2:0] mm_interconnect_0_alt_vip_cl_tpg_0_control_address;       // mm_interconnect_0:alt_vip_cl_tpg_0_control_address -> alt_vip_cl_tpg_0:control_address
	wire         mm_interconnect_0_alt_vip_cl_tpg_0_control_read;          // mm_interconnect_0:alt_vip_cl_tpg_0_control_read -> alt_vip_cl_tpg_0:control_read
	wire   [3:0] mm_interconnect_0_alt_vip_cl_tpg_0_control_byteenable;    // mm_interconnect_0:alt_vip_cl_tpg_0_control_byteenable -> alt_vip_cl_tpg_0:control_byteenable
	wire         mm_interconnect_0_alt_vip_cl_tpg_0_control_readdatavalid; // alt_vip_cl_tpg_0:control_readdatavalid -> mm_interconnect_0:alt_vip_cl_tpg_0_control_readdatavalid
	wire         mm_interconnect_0_alt_vip_cl_tpg_0_control_write;         // mm_interconnect_0:alt_vip_cl_tpg_0_control_write -> alt_vip_cl_tpg_0:control_write
	wire  [31:0] mm_interconnect_0_alt_vip_cl_tpg_0_control_writedata;     // mm_interconnect_0:alt_vip_cl_tpg_0_control_writedata -> alt_vip_cl_tpg_0:control_writedata
	wire  [31:0] mm_interconnect_0_alt_vip_cl_scl_0_control_readdata;      // alt_vip_cl_scl_0:control_readdata -> mm_interconnect_0:alt_vip_cl_scl_0_control_readdata
	wire         mm_interconnect_0_alt_vip_cl_scl_0_control_waitrequest;   // alt_vip_cl_scl_0:control_waitrequest -> mm_interconnect_0:alt_vip_cl_scl_0_control_waitrequest
	wire   [6:0] mm_interconnect_0_alt_vip_cl_scl_0_control_address;       // mm_interconnect_0:alt_vip_cl_scl_0_control_address -> alt_vip_cl_scl_0:control_address
	wire         mm_interconnect_0_alt_vip_cl_scl_0_control_read;          // mm_interconnect_0:alt_vip_cl_scl_0_control_read -> alt_vip_cl_scl_0:control_read
	wire   [3:0] mm_interconnect_0_alt_vip_cl_scl_0_control_byteenable;    // mm_interconnect_0:alt_vip_cl_scl_0_control_byteenable -> alt_vip_cl_scl_0:control_byteenable
	wire         mm_interconnect_0_alt_vip_cl_scl_0_control_readdatavalid; // alt_vip_cl_scl_0:control_readdatavalid -> mm_interconnect_0:alt_vip_cl_scl_0_control_readdatavalid
	wire         mm_interconnect_0_alt_vip_cl_scl_0_control_write;         // mm_interconnect_0:alt_vip_cl_scl_0_control_write -> alt_vip_cl_scl_0:control_write
	wire  [31:0] mm_interconnect_0_alt_vip_cl_scl_0_control_writedata;     // mm_interconnect_0:alt_vip_cl_scl_0_control_writedata -> alt_vip_cl_scl_0:control_writedata
	wire         rst_controller_reset_out_reset;                           // rst_controller:reset_out -> [alt_vip_cl_cvo_0:main_reset_reset, alt_vip_cl_scl_0:main_reset, alt_vip_cl_tpg_0:main_reset, mm_interconnect_0:alt_vip_cl_cvo_0_main_reset_reset_bridge_in_reset_reset]
	wire         master_0_master_reset_reset;                              // master_0:master_reset_reset -> rst_controller:reset_in1
	wire         rst_controller_001_reset_out_reset;                       // rst_controller_001:reset_out -> [mm_interconnect_0:master_0_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_0:mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset, mm_master_bfm_0:reset]

	pattern_gen_alt_vip_cl_cvo_0 #(
		.BPS                           (8),
		.NUMBER_OF_COLOUR_PLANES       (3),
		.COLOUR_PLANES_ARE_IN_PARALLEL (1),
		.INTERLACED                    (0),
		.H_ACTIVE_PIXELS               (1920),
		.V_ACTIVE_LINES                (1080),
		.ACCEPT_COLOURS_IN_SEQ         (0),
		.FIFO_DEPTH                    (1920),
		.CLOCKS_ARE_SAME               (1),
		.USE_CONTROL                   (1),
		.NO_OF_MODES                   (1),
		.THRESHOLD                     (1919),
		.STD_WIDTH                     (1),
		.GENERATE_SYNC                 (0),
		.LOW_LATENCY                   (0),
		.USE_EMBEDDED_SYNCS            (0),
		.AP_LINE                       (0),
		.V_BLANK                       (0),
		.H_BLANK                       (0),
		.H_SYNC_LENGTH                 (40),
		.H_FRONT_PORCH                 (110),
		.H_BACK_PORCH                  (220),
		.V_SYNC_LENGTH                 (5),
		.V_FRONT_PORCH                 (5),
		.V_BACK_PORCH                  (20),
		.F_RISING_EDGE                 (0),
		.F_FALLING_EDGE                (0),
		.FIELD0_V_RISING_EDGE          (0),
		.FIELD0_V_BLANK                (0),
		.FIELD0_V_SYNC_LENGTH          (0),
		.FIELD0_V_FRONT_PORCH          (0),
		.FIELD0_V_BACK_PORCH           (0),
		.ANC_LINE                      (0),
		.FIELD0_ANC_LINE               (0),
		.PIXELS_IN_PARALLEL            (1),
		.SRC_WIDTH                     (8),
		.DST_WIDTH                     (8),
		.CONTEXT_WIDTH                 (8),
		.TASK_WIDTH                    (8)
	) alt_vip_cl_cvo_0 (
		.clocked_video_vid_data        (alt_vip_cl_cvo_0_clocked_video_vid_data),                  //     clocked_video.vid_data
		.clocked_video_underflow       (alt_vip_cl_cvo_0_clocked_video_underflow),                 //                  .underflow
		.clocked_video_vid_mode_change (alt_vip_cl_cvo_0_clocked_video_vid_mode_change),           //                  .vid_mode_change
		.clocked_video_vid_std         (alt_vip_cl_cvo_0_clocked_video_vid_std),                   //                  .vid_std
		.clocked_video_vid_datavalid   (alt_vip_cl_cvo_0_clocked_video_vid_datavalid),             //                  .vid_datavalid
		.clocked_video_vid_v_sync      (alt_vip_cl_cvo_0_clocked_video_vid_v_sync),                //                  .vid_v_sync
		.clocked_video_vid_h_sync      (alt_vip_cl_cvo_0_clocked_video_vid_h_sync),                //                  .vid_h_sync
		.clocked_video_vid_f           (alt_vip_cl_cvo_0_clocked_video_vid_f),                     //                  .vid_f
		.clocked_video_vid_h           (alt_vip_cl_cvo_0_clocked_video_vid_h),                     //                  .vid_h
		.clocked_video_vid_v           (alt_vip_cl_cvo_0_clocked_video_vid_v),                     //                  .vid_v
		.main_clock_clk                (clk_clk),                                                  //        main_clock.clk
		.main_reset_reset              (rst_controller_reset_out_reset),                           //        main_reset.reset
		.din_data                      (alt_vip_cl_scl_0_dout_data),                               //               din.data
		.din_valid                     (alt_vip_cl_scl_0_dout_valid),                              //                  .valid
		.din_startofpacket             (alt_vip_cl_scl_0_dout_startofpacket),                      //                  .startofpacket
		.din_endofpacket               (alt_vip_cl_scl_0_dout_endofpacket),                        //                  .endofpacket
		.din_ready                     (alt_vip_cl_scl_0_dout_ready),                              //                  .ready
		.status_update_irq_irq         (),                                                         // status_update_irq.irq
		.control_address               (mm_interconnect_0_alt_vip_cl_cvo_0_control_address),       //           control.address
		.control_byteenable            (mm_interconnect_0_alt_vip_cl_cvo_0_control_byteenable),    //                  .byteenable
		.control_write                 (mm_interconnect_0_alt_vip_cl_cvo_0_control_write),         //                  .write
		.control_writedata             (mm_interconnect_0_alt_vip_cl_cvo_0_control_writedata),     //                  .writedata
		.control_read                  (mm_interconnect_0_alt_vip_cl_cvo_0_control_read),          //                  .read
		.control_readdata              (mm_interconnect_0_alt_vip_cl_cvo_0_control_readdata),      //                  .readdata
		.control_readdatavalid         (mm_interconnect_0_alt_vip_cl_cvo_0_control_readdatavalid), //                  .readdatavalid
		.control_waitrequest           (mm_interconnect_0_alt_vip_cl_cvo_0_control_waitrequest)    //                  .waitrequest
	);

	pattern_gen_alt_vip_cl_scl_0 alt_vip_cl_scl_0 (
		.main_clock            (clk_clk),                                                  // main_clock.clk
		.main_reset            (rst_controller_reset_out_reset),                           // main_reset.reset
		.din_data              (alt_vip_cl_tpg_0_dout_data),                               //        din.data
		.din_valid             (alt_vip_cl_tpg_0_dout_valid),                              //           .valid
		.din_startofpacket     (alt_vip_cl_tpg_0_dout_startofpacket),                      //           .startofpacket
		.din_endofpacket       (alt_vip_cl_tpg_0_dout_endofpacket),                        //           .endofpacket
		.din_ready             (alt_vip_cl_tpg_0_dout_ready),                              //           .ready
		.dout_data             (alt_vip_cl_scl_0_dout_data),                               //       dout.data
		.dout_valid            (alt_vip_cl_scl_0_dout_valid),                              //           .valid
		.dout_startofpacket    (alt_vip_cl_scl_0_dout_startofpacket),                      //           .startofpacket
		.dout_endofpacket      (alt_vip_cl_scl_0_dout_endofpacket),                        //           .endofpacket
		.dout_ready            (alt_vip_cl_scl_0_dout_ready),                              //           .ready
		.control_address       (mm_interconnect_0_alt_vip_cl_scl_0_control_address),       //    control.address
		.control_byteenable    (mm_interconnect_0_alt_vip_cl_scl_0_control_byteenable),    //           .byteenable
		.control_write         (mm_interconnect_0_alt_vip_cl_scl_0_control_write),         //           .write
		.control_writedata     (mm_interconnect_0_alt_vip_cl_scl_0_control_writedata),     //           .writedata
		.control_read          (mm_interconnect_0_alt_vip_cl_scl_0_control_read),          //           .read
		.control_readdata      (mm_interconnect_0_alt_vip_cl_scl_0_control_readdata),      //           .readdata
		.control_readdatavalid (mm_interconnect_0_alt_vip_cl_scl_0_control_readdatavalid), //           .readdatavalid
		.control_waitrequest   (mm_interconnect_0_alt_vip_cl_scl_0_control_waitrequest)    //           .waitrequest
	);

	pattern_gen_alt_vip_cl_tpg_0 #(
		.BITS_PER_SYMBOL              (8),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.MAX_WIDTH                    (1920),
		.MAX_HEIGHT                   (1080),
		.OUTPUT_FORMAT                ("4.4.4"),
		.COLOR_SPACE                  ("RGB"),
		.INTERLACING                  ("prog"),
		.PATTERN                      ("colorbars"),
		.UNIFORM_VALUE_RY             (16),
		.UNIFORM_VALUE_GCB            (16),
		.UNIFORM_VALUE_BCR            (16),
		.RUNTIME_CONTROL              (1)
	) alt_vip_cl_tpg_0 (
		.main_clock            (clk_clk),                                                  // main_clock.clk
		.main_reset            (rst_controller_reset_out_reset),                           // main_reset.reset
		.dout_data             (alt_vip_cl_tpg_0_dout_data),                               //       dout.data
		.dout_valid            (alt_vip_cl_tpg_0_dout_valid),                              //           .valid
		.dout_startofpacket    (alt_vip_cl_tpg_0_dout_startofpacket),                      //           .startofpacket
		.dout_endofpacket      (alt_vip_cl_tpg_0_dout_endofpacket),                        //           .endofpacket
		.dout_ready            (alt_vip_cl_tpg_0_dout_ready),                              //           .ready
		.control_address       (mm_interconnect_0_alt_vip_cl_tpg_0_control_address),       //    control.address
		.control_byteenable    (mm_interconnect_0_alt_vip_cl_tpg_0_control_byteenable),    //           .byteenable
		.control_write         (mm_interconnect_0_alt_vip_cl_tpg_0_control_write),         //           .write
		.control_writedata     (mm_interconnect_0_alt_vip_cl_tpg_0_control_writedata),     //           .writedata
		.control_read          (mm_interconnect_0_alt_vip_cl_tpg_0_control_read),          //           .read
		.control_readdata      (mm_interconnect_0_alt_vip_cl_tpg_0_control_readdata),      //           .readdata
		.control_readdatavalid (mm_interconnect_0_alt_vip_cl_tpg_0_control_readdatavalid), //           .readdatavalid
		.control_waitrequest   (mm_interconnect_0_alt_vip_cl_tpg_0_control_waitrequest)    //           .waitrequest
	);

	pattern_gen_master_0 #(
		.USE_PLI     (0),
		.PLI_PORT    (50000),
		.FIFO_DEPTHS (2)
	) master_0 (
		.clk_clk              (clk_clk),                       //          clk.clk
		.clk_reset_reset      (~reset_reset_n),                //    clk_reset.reset
		.master_address       (master_0_master_address),       //       master.address
		.master_readdata      (master_0_master_readdata),      //             .readdata
		.master_read          (master_0_master_read),          //             .read
		.master_write         (master_0_master_write),         //             .write
		.master_writedata     (master_0_master_writedata),     //             .writedata
		.master_waitrequest   (master_0_master_waitrequest),   //             .waitrequest
		.master_readdatavalid (master_0_master_readdatavalid), //             .readdatavalid
		.master_byteenable    (master_0_master_byteenable),    //             .byteenable
		.master_reset_reset   (master_0_master_reset_reset)    // master_reset.reset
	);

	altera_avalon_mm_master_bfm #(
		.AV_ADDRESS_W               (32),
		.AV_SYMBOL_W                (8),
		.AV_NUMSYMBOLS              (4),
		.AV_BURSTCOUNT_W            (3),
		.AV_READRESPONSE_W          (8),
		.AV_WRITERESPONSE_W         (8),
		.USE_READ                   (1),
		.USE_WRITE                  (1),
		.USE_ADDRESS                (1),
		.USE_BYTE_ENABLE            (1),
		.USE_BURSTCOUNT             (1),
		.USE_READ_DATA              (1),
		.USE_READ_DATA_VALID        (1),
		.USE_WRITE_DATA             (1),
		.USE_BEGIN_TRANSFER         (0),
		.USE_BEGIN_BURST_TRANSFER   (0),
		.USE_WAIT_REQUEST           (1),
		.USE_TRANSACTIONID          (0),
		.USE_WRITERESPONSE          (0),
		.USE_READRESPONSE           (0),
		.USE_CLKEN                  (0),
		.AV_CONSTANT_BURST_BEHAVIOR (1),
		.AV_BURST_LINEWRAP          (1),
		.AV_BURST_BNDR_ONLY         (1),
		.AV_MAX_PENDING_READS       (0),
		.AV_MAX_PENDING_WRITES      (0),
		.AV_FIX_READ_LATENCY        (1),
		.AV_READ_WAIT_TIME          (1),
		.AV_WRITE_WAIT_TIME         (0),
		.REGISTER_WAITREQUEST       (0),
		.AV_REGISTERINCOMINGSIGNALS (0),
		.VHDL_ID                    (0)
	) mm_master_bfm_0 (
		.clk                    (clk_clk),                            //       clk.clk
		.reset                  (rst_controller_001_reset_out_reset), // clk_reset.reset
		.avm_address            (mm_master_bfm_0_m0_address),         //        m0.address
		.avm_burstcount         (mm_master_bfm_0_m0_burstcount),      //          .burstcount
		.avm_readdata           (mm_master_bfm_0_m0_readdata),        //          .readdata
		.avm_writedata          (mm_master_bfm_0_m0_writedata),       //          .writedata
		.avm_waitrequest        (mm_master_bfm_0_m0_waitrequest),     //          .waitrequest
		.avm_write              (mm_master_bfm_0_m0_write),           //          .write
		.avm_read               (mm_master_bfm_0_m0_read),            //          .read
		.avm_byteenable         (mm_master_bfm_0_m0_byteenable),      //          .byteenable
		.avm_readdatavalid      (mm_master_bfm_0_m0_readdatavalid),   //          .readdatavalid
		.avm_begintransfer      (),                                   // (terminated)
		.avm_beginbursttransfer (),                                   // (terminated)
		.avm_arbiterlock        (),                                   // (terminated)
		.avm_lock               (),                                   // (terminated)
		.avm_debugaccess        (),                                   // (terminated)
		.avm_transactionid      (),                                   // (terminated)
		.avm_readid             (8'b00000000),                        // (terminated)
		.avm_writeid            (8'b00000000),                        // (terminated)
		.avm_clken              (),                                   // (terminated)
		.avm_response           (2'b00),                              // (terminated)
		.avm_writeresponsevalid (1'b0),                               // (terminated)
		.avm_readresponse       (8'b00000000),                        // (terminated)
		.avm_writeresponse      (8'b00000000)                         // (terminated)
	);

	pattern_gen_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                           (clk_clk),                                                  //                                         clk_0_clk.clk
		.alt_vip_cl_cvo_0_main_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                           // alt_vip_cl_cvo_0_main_reset_reset_bridge_in_reset.reset
		.master_0_clk_reset_reset_bridge_in_reset_reset          (rst_controller_001_reset_out_reset),                       //          master_0_clk_reset_reset_bridge_in_reset.reset
		.mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset   (rst_controller_001_reset_out_reset),                       //   mm_master_bfm_0_clk_reset_reset_bridge_in_reset.reset
		.master_0_master_address                                 (master_0_master_address),                                  //                                   master_0_master.address
		.master_0_master_waitrequest                             (master_0_master_waitrequest),                              //                                                  .waitrequest
		.master_0_master_byteenable                              (master_0_master_byteenable),                               //                                                  .byteenable
		.master_0_master_read                                    (master_0_master_read),                                     //                                                  .read
		.master_0_master_readdata                                (master_0_master_readdata),                                 //                                                  .readdata
		.master_0_master_readdatavalid                           (master_0_master_readdatavalid),                            //                                                  .readdatavalid
		.master_0_master_write                                   (master_0_master_write),                                    //                                                  .write
		.master_0_master_writedata                               (master_0_master_writedata),                                //                                                  .writedata
		.mm_master_bfm_0_m0_address                              (mm_master_bfm_0_m0_address),                               //                                mm_master_bfm_0_m0.address
		.mm_master_bfm_0_m0_waitrequest                          (mm_master_bfm_0_m0_waitrequest),                           //                                                  .waitrequest
		.mm_master_bfm_0_m0_burstcount                           (mm_master_bfm_0_m0_burstcount),                            //                                                  .burstcount
		.mm_master_bfm_0_m0_byteenable                           (mm_master_bfm_0_m0_byteenable),                            //                                                  .byteenable
		.mm_master_bfm_0_m0_read                                 (mm_master_bfm_0_m0_read),                                  //                                                  .read
		.mm_master_bfm_0_m0_readdata                             (mm_master_bfm_0_m0_readdata),                              //                                                  .readdata
		.mm_master_bfm_0_m0_readdatavalid                        (mm_master_bfm_0_m0_readdatavalid),                         //                                                  .readdatavalid
		.mm_master_bfm_0_m0_write                                (mm_master_bfm_0_m0_write),                                 //                                                  .write
		.mm_master_bfm_0_m0_writedata                            (mm_master_bfm_0_m0_writedata),                             //                                                  .writedata
		.alt_vip_cl_cvo_0_control_address                        (mm_interconnect_0_alt_vip_cl_cvo_0_control_address),       //                          alt_vip_cl_cvo_0_control.address
		.alt_vip_cl_cvo_0_control_write                          (mm_interconnect_0_alt_vip_cl_cvo_0_control_write),         //                                                  .write
		.alt_vip_cl_cvo_0_control_read                           (mm_interconnect_0_alt_vip_cl_cvo_0_control_read),          //                                                  .read
		.alt_vip_cl_cvo_0_control_readdata                       (mm_interconnect_0_alt_vip_cl_cvo_0_control_readdata),      //                                                  .readdata
		.alt_vip_cl_cvo_0_control_writedata                      (mm_interconnect_0_alt_vip_cl_cvo_0_control_writedata),     //                                                  .writedata
		.alt_vip_cl_cvo_0_control_byteenable                     (mm_interconnect_0_alt_vip_cl_cvo_0_control_byteenable),    //                                                  .byteenable
		.alt_vip_cl_cvo_0_control_readdatavalid                  (mm_interconnect_0_alt_vip_cl_cvo_0_control_readdatavalid), //                                                  .readdatavalid
		.alt_vip_cl_cvo_0_control_waitrequest                    (mm_interconnect_0_alt_vip_cl_cvo_0_control_waitrequest),   //                                                  .waitrequest
		.alt_vip_cl_scl_0_control_address                        (mm_interconnect_0_alt_vip_cl_scl_0_control_address),       //                          alt_vip_cl_scl_0_control.address
		.alt_vip_cl_scl_0_control_write                          (mm_interconnect_0_alt_vip_cl_scl_0_control_write),         //                                                  .write
		.alt_vip_cl_scl_0_control_read                           (mm_interconnect_0_alt_vip_cl_scl_0_control_read),          //                                                  .read
		.alt_vip_cl_scl_0_control_readdata                       (mm_interconnect_0_alt_vip_cl_scl_0_control_readdata),      //                                                  .readdata
		.alt_vip_cl_scl_0_control_writedata                      (mm_interconnect_0_alt_vip_cl_scl_0_control_writedata),     //                                                  .writedata
		.alt_vip_cl_scl_0_control_byteenable                     (mm_interconnect_0_alt_vip_cl_scl_0_control_byteenable),    //                                                  .byteenable
		.alt_vip_cl_scl_0_control_readdatavalid                  (mm_interconnect_0_alt_vip_cl_scl_0_control_readdatavalid), //                                                  .readdatavalid
		.alt_vip_cl_scl_0_control_waitrequest                    (mm_interconnect_0_alt_vip_cl_scl_0_control_waitrequest),   //                                                  .waitrequest
		.alt_vip_cl_tpg_0_control_address                        (mm_interconnect_0_alt_vip_cl_tpg_0_control_address),       //                          alt_vip_cl_tpg_0_control.address
		.alt_vip_cl_tpg_0_control_write                          (mm_interconnect_0_alt_vip_cl_tpg_0_control_write),         //                                                  .write
		.alt_vip_cl_tpg_0_control_read                           (mm_interconnect_0_alt_vip_cl_tpg_0_control_read),          //                                                  .read
		.alt_vip_cl_tpg_0_control_readdata                       (mm_interconnect_0_alt_vip_cl_tpg_0_control_readdata),      //                                                  .readdata
		.alt_vip_cl_tpg_0_control_writedata                      (mm_interconnect_0_alt_vip_cl_tpg_0_control_writedata),     //                                                  .writedata
		.alt_vip_cl_tpg_0_control_byteenable                     (mm_interconnect_0_alt_vip_cl_tpg_0_control_byteenable),    //                                                  .byteenable
		.alt_vip_cl_tpg_0_control_readdatavalid                  (mm_interconnect_0_alt_vip_cl_tpg_0_control_readdatavalid), //                                                  .readdatavalid
		.alt_vip_cl_tpg_0_control_waitrequest                    (mm_interconnect_0_alt_vip_cl_tpg_0_control_waitrequest)    //                                                  .waitrequest
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.reset_in1      (master_0_master_reset_reset),    // reset_in1.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
