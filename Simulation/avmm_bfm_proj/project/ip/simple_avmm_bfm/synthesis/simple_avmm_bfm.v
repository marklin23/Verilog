// simple_avmm_bfm.v

// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module simple_avmm_bfm (
		input  wire        clk_clk,                                     //                                  clk.clk
		input  wire [31:0] reg32_read_port_external_connection_export,  //  reg32_read_port_external_connection.export
		output wire [31:0] reg32_write_port_external_connection_export, // reg32_write_port_external_connection.export
		input  wire        reset_reset_n                                //                                reset.reset_n
	);

	wire  [31:0] mm_master_bfm_0_m0_readdata;                           // mm_interconnect_0:mm_master_bfm_0_m0_readdata -> mm_master_bfm_0:avm_readdata
	wire         mm_master_bfm_0_m0_waitrequest;                        // mm_interconnect_0:mm_master_bfm_0_m0_waitrequest -> mm_master_bfm_0:avm_waitrequest
	wire  [31:0] mm_master_bfm_0_m0_address;                            // mm_master_bfm_0:avm_address -> mm_interconnect_0:mm_master_bfm_0_m0_address
	wire         mm_master_bfm_0_m0_read;                               // mm_master_bfm_0:avm_read -> mm_interconnect_0:mm_master_bfm_0_m0_read
	wire   [3:0] mm_master_bfm_0_m0_byteenable;                         // mm_master_bfm_0:avm_byteenable -> mm_interconnect_0:mm_master_bfm_0_m0_byteenable
	wire         mm_master_bfm_0_m0_readdatavalid;                      // mm_interconnect_0:mm_master_bfm_0_m0_readdatavalid -> mm_master_bfm_0:avm_readdatavalid
	wire  [31:0] mm_master_bfm_0_m0_writedata;                          // mm_master_bfm_0:avm_writedata -> mm_interconnect_0:mm_master_bfm_0_m0_writedata
	wire         mm_master_bfm_0_m0_write;                              // mm_master_bfm_0:avm_write -> mm_interconnect_0:mm_master_bfm_0_m0_write
	wire   [2:0] mm_master_bfm_0_m0_burstcount;                         // mm_master_bfm_0:avm_burstcount -> mm_interconnect_0:mm_master_bfm_0_m0_burstcount
	wire  [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata; // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;  // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire         mm_interconnect_0_onchip_memory2_0_s1_chipselect;      // mm_interconnect_0:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_readdata;        // onchip_memory2_0:readdata -> mm_interconnect_0:onchip_memory2_0_s1_readdata
	wire   [9:0] mm_interconnect_0_onchip_memory2_0_s1_address;         // mm_interconnect_0:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	wire   [3:0] mm_interconnect_0_onchip_memory2_0_s1_byteenable;      // mm_interconnect_0:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	wire         mm_interconnect_0_onchip_memory2_0_s1_write;           // mm_interconnect_0:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_writedata;       // mm_interconnect_0:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_clken;           // mm_interconnect_0:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	wire         mm_interconnect_0_reg32_write_port_s1_chipselect;      // mm_interconnect_0:reg32_write_port_s1_chipselect -> reg32_write_port:chipselect
	wire  [31:0] mm_interconnect_0_reg32_write_port_s1_readdata;        // reg32_write_port:readdata -> mm_interconnect_0:reg32_write_port_s1_readdata
	wire   [1:0] mm_interconnect_0_reg32_write_port_s1_address;         // mm_interconnect_0:reg32_write_port_s1_address -> reg32_write_port:address
	wire         mm_interconnect_0_reg32_write_port_s1_write;           // mm_interconnect_0:reg32_write_port_s1_write -> reg32_write_port:write_n
	wire  [31:0] mm_interconnect_0_reg32_write_port_s1_writedata;       // mm_interconnect_0:reg32_write_port_s1_writedata -> reg32_write_port:writedata
	wire  [31:0] mm_interconnect_0_reg32_read_port_s1_readdata;         // reg32_read_port:readdata -> mm_interconnect_0:reg32_read_port_s1_readdata
	wire   [1:0] mm_interconnect_0_reg32_read_port_s1_address;          // mm_interconnect_0:reg32_read_port_s1_address -> reg32_read_port:address
	wire         rst_controller_reset_out_reset;                        // rst_controller:reset_out -> [mm_interconnect_0:mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset, mm_master_bfm_0:reset, onchip_memory2_0:reset, reg32_read_port:reset_n, reg32_write_port:reset_n, rst_translator:in_reset, sysid_qsys_0:reset_n]
	wire         rst_controller_reset_out_reset_req;                    // rst_controller:reset_req -> [onchip_memory2_0:reset_req, rst_translator:reset_req_in]

	altera_avalon_mm_master_bfm #(
		.AV_ADDRESS_W               (32),
		.AV_SYMBOL_W                (8),
		.AV_NUMSYMBOLS              (4),
		.AV_BURSTCOUNT_W            (3),
		.AV_READRESPONSE_W          (8),
		.AV_WRITERESPONSE_W         (8),
		.USE_READ                   (1),
		.USE_WRITE                  (1),
		.USE_ADDRESS                (1),
		.USE_BYTE_ENABLE            (1),
		.USE_BURSTCOUNT             (1),
		.USE_READ_DATA              (1),
		.USE_READ_DATA_VALID        (1),
		.USE_WRITE_DATA             (1),
		.USE_BEGIN_TRANSFER         (0),
		.USE_BEGIN_BURST_TRANSFER   (0),
		.USE_WAIT_REQUEST           (1),
		.USE_TRANSACTIONID          (0),
		.USE_WRITERESPONSE          (0),
		.USE_READRESPONSE           (0),
		.USE_CLKEN                  (0),
		.AV_CONSTANT_BURST_BEHAVIOR (1),
		.AV_BURST_LINEWRAP          (1),
		.AV_BURST_BNDR_ONLY         (1),
		.AV_MAX_PENDING_READS       (0),
		.AV_MAX_PENDING_WRITES      (0),
		.AV_FIX_READ_LATENCY        (1),
		.AV_READ_WAIT_TIME          (1),
		.AV_WRITE_WAIT_TIME         (0),
		.REGISTER_WAITREQUEST       (0),
		.AV_REGISTERINCOMINGSIGNALS (0),
		.VHDL_ID                    (0)
	) mm_master_bfm_0 (
		.clk                    (clk_clk),                          //       clk.clk
		.reset                  (rst_controller_reset_out_reset),   // clk_reset.reset
		.avm_address            (mm_master_bfm_0_m0_address),       //        m0.address
		.avm_burstcount         (mm_master_bfm_0_m0_burstcount),    //          .burstcount
		.avm_readdata           (mm_master_bfm_0_m0_readdata),      //          .readdata
		.avm_writedata          (mm_master_bfm_0_m0_writedata),     //          .writedata
		.avm_waitrequest        (mm_master_bfm_0_m0_waitrequest),   //          .waitrequest
		.avm_write              (mm_master_bfm_0_m0_write),         //          .write
		.avm_read               (mm_master_bfm_0_m0_read),          //          .read
		.avm_byteenable         (mm_master_bfm_0_m0_byteenable),    //          .byteenable
		.avm_readdatavalid      (mm_master_bfm_0_m0_readdatavalid), //          .readdatavalid
		.avm_begintransfer      (),                                 // (terminated)
		.avm_beginbursttransfer (),                                 // (terminated)
		.avm_arbiterlock        (),                                 // (terminated)
		.avm_lock               (),                                 // (terminated)
		.avm_debugaccess        (),                                 // (terminated)
		.avm_transactionid      (),                                 // (terminated)
		.avm_readid             (8'b00000000),                      // (terminated)
		.avm_writeid            (8'b00000000),                      // (terminated)
		.avm_clken              (),                                 // (terminated)
		.avm_response           (2'b00),                            // (terminated)
		.avm_writeresponsevalid (1'b0),                             // (terminated)
		.avm_readresponse       (8'b00000000),                      // (terminated)
		.avm_writeresponse      (8'b00000000)                       // (terminated)
	);

	simple_avmm_bfm_onchip_memory2_0 onchip_memory2_0 (
		.clk        (clk_clk),                                          //   clk1.clk
		.address    (mm_interconnect_0_onchip_memory2_0_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_memory2_0_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_memory2_0_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_memory2_0_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_memory2_0_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_memory2_0_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_memory2_0_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),                   // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),               //       .reset_req
		.freeze     (1'b0)                                              // (terminated)
	);

	simple_avmm_bfm_reg32_read_port reg32_read_port (
		.clk      (clk_clk),                                       //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),               //               reset.reset_n
		.address  (mm_interconnect_0_reg32_read_port_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_reg32_read_port_s1_readdata), //                    .readdata
		.in_port  (reg32_read_port_external_connection_export)     // external_connection.export
	);

	simple_avmm_bfm_reg32_write_port reg32_write_port (
		.clk        (clk_clk),                                          //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                  //               reset.reset_n
		.address    (mm_interconnect_0_reg32_write_port_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_reg32_write_port_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_reg32_write_port_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_reg32_write_port_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_reg32_write_port_s1_readdata),   //                    .readdata
		.out_port   (reg32_write_port_external_connection_export)       // external_connection.export
	);

	simple_avmm_bfm_sysid_qsys_0 sysid_qsys_0 (
		.clock    (clk_clk),                                               //           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                       //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address)   //              .address
	);

	simple_avmm_bfm_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                         (clk_clk),                                               //                                       clk_0_clk.clk
		.mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                        // mm_master_bfm_0_clk_reset_reset_bridge_in_reset.reset
		.mm_master_bfm_0_m0_address                            (mm_master_bfm_0_m0_address),                            //                              mm_master_bfm_0_m0.address
		.mm_master_bfm_0_m0_waitrequest                        (mm_master_bfm_0_m0_waitrequest),                        //                                                .waitrequest
		.mm_master_bfm_0_m0_burstcount                         (mm_master_bfm_0_m0_burstcount),                         //                                                .burstcount
		.mm_master_bfm_0_m0_byteenable                         (mm_master_bfm_0_m0_byteenable),                         //                                                .byteenable
		.mm_master_bfm_0_m0_read                               (mm_master_bfm_0_m0_read),                               //                                                .read
		.mm_master_bfm_0_m0_readdata                           (mm_master_bfm_0_m0_readdata),                           //                                                .readdata
		.mm_master_bfm_0_m0_readdatavalid                      (mm_master_bfm_0_m0_readdatavalid),                      //                                                .readdatavalid
		.mm_master_bfm_0_m0_write                              (mm_master_bfm_0_m0_write),                              //                                                .write
		.mm_master_bfm_0_m0_writedata                          (mm_master_bfm_0_m0_writedata),                          //                                                .writedata
		.onchip_memory2_0_s1_address                           (mm_interconnect_0_onchip_memory2_0_s1_address),         //                             onchip_memory2_0_s1.address
		.onchip_memory2_0_s1_write                             (mm_interconnect_0_onchip_memory2_0_s1_write),           //                                                .write
		.onchip_memory2_0_s1_readdata                          (mm_interconnect_0_onchip_memory2_0_s1_readdata),        //                                                .readdata
		.onchip_memory2_0_s1_writedata                         (mm_interconnect_0_onchip_memory2_0_s1_writedata),       //                                                .writedata
		.onchip_memory2_0_s1_byteenable                        (mm_interconnect_0_onchip_memory2_0_s1_byteenable),      //                                                .byteenable
		.onchip_memory2_0_s1_chipselect                        (mm_interconnect_0_onchip_memory2_0_s1_chipselect),      //                                                .chipselect
		.onchip_memory2_0_s1_clken                             (mm_interconnect_0_onchip_memory2_0_s1_clken),           //                                                .clken
		.reg32_read_port_s1_address                            (mm_interconnect_0_reg32_read_port_s1_address),          //                              reg32_read_port_s1.address
		.reg32_read_port_s1_readdata                           (mm_interconnect_0_reg32_read_port_s1_readdata),         //                                                .readdata
		.reg32_write_port_s1_address                           (mm_interconnect_0_reg32_write_port_s1_address),         //                             reg32_write_port_s1.address
		.reg32_write_port_s1_write                             (mm_interconnect_0_reg32_write_port_s1_write),           //                                                .write
		.reg32_write_port_s1_readdata                          (mm_interconnect_0_reg32_write_port_s1_readdata),        //                                                .readdata
		.reg32_write_port_s1_writedata                         (mm_interconnect_0_reg32_write_port_s1_writedata),       //                                                .writedata
		.reg32_write_port_s1_chipselect                        (mm_interconnect_0_reg32_write_port_s1_chipselect),      //                                                .chipselect
		.sysid_qsys_0_control_slave_address                    (mm_interconnect_0_sysid_qsys_0_control_slave_address),  //                      sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata                   (mm_interconnect_0_sysid_qsys_0_control_slave_readdata)  //                                                .readdata
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
